---
preview: Что-бы написать декоратор необходимо:
title: Декоратор для authorization
tags: flask
author: rrLero
date: 17-05-21 19:55
---
```
from flask import request, abort
from functools import wraps


def requires_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        parser_auth = reqparse.RequestParser()
        parser_auth.add_argument('token', type=str)
        args = parser_auth.parse_args()
        auth = args.get('token')
        user_id = kwargs['user_id']
        if not auth:  # no header set
            abort(401)
        user = session_git.query(Users).filter(Users.id == user_id, Users.user_token == auth).first()
        if user is None:
            abort(401)
        return f(*args, **kwargs)
    return decorated



class CreateEditDeleteNotes(Resource):
    @requires_auth
		def get(self, user_id):
		 ........
```
kwargs - перехватывает переменные, которые приходят в запросе
а аргументы я получаю с помощью reqparse.RequestParser(), хотя можно и через args