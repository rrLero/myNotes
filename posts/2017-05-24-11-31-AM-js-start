---
preview: Async/defer
title: Async/defer
tags: JS
author: rrLero
date: 2017-05-24 14:27:00
---
Атрибут async

Поддерживается всеми браузерами, кроме IE9-. Скрипт выполняется полностью асинхронно. То есть, при обнаружении <script async src="..."> браузер не останавливает обработку страницы, а спокойно работает дальше. Когда скрипт будет загружен – он выполнится.
Атрибут defer

Поддерживается всеми браузерами, включая самые старые IE. Скрипт также выполняется асинхронно, не заставляет ждать страницу, но есть два отличия от async.

Первое – браузер гарантирует, что относительный порядок скриптов с defer будет сохранён.

То есть, в таком коде (с async) первым сработает тот скрипт, который раньше загрузится:
```
<script src="1.js" async></script>
<script src="2.js" async></script>
```
А в таком коде (с defer) первым сработает всегда 1.js, а скрипт 2.js, даже если загрузился раньше, будет его ждать.

```
<script src="1.js" defer></script>
<script src="2.js" defer></script>
```

Поэтому атрибут defer используют в тех случаях, когда второй скрипт 2.js зависит от первого 1.js, к примеру – использует что-то, описанное первым скриптом.

Второе отличие – скрипт с defer сработает, когда весь HTML-документ будет обработан браузером.

Например, если документ достаточно большой…

```
<script src="async.js" async></script>
<script src="defer.js" defer></script>
```

Много много много букв

…То скрипт async.js выполнится, как только загрузится – возможно, до того, как весь документ готов. А defer.js подождёт готовности всего документа.

Это бывает удобно, когда мы в скрипте хотим работать с документом, и должны быть уверены, что он олностью получен.

async вместе с defer

При одновременном указании async и defer в современных браузерах будет использован только async, в IE9- – только defer (не понимает async).
Атрибуты async/defer – только для внешних скриптов

Атрибуты async/defer работают только в том случае, если назначены на внешние скрипты, т.е. имеющие src.

При попытке назначить их на обычные скрипты <script>…</script>, они будут проигнороированы.

Тот же пример с async:

```
             
<p>Важная информация теперь не ждёт, пока загрузится скрипт...</p>

<script async src="https://js.cx/hello/ads.js?speed=0"></script>

<p>...Важная информация!</p>
```

При запуске вы увидите, что вся страница отобразилась тут же, а alert из внешнего скрипта появится позже, когда загрузится скрипт.