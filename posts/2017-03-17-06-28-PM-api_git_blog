
---
preview: No Preview
title: API git_blog documentation
tags: Программирование
author: rrLero
date: 2017-03-17 20:13:00
---
В данный момент бэкенд размещен на http://gitblog.pythonanywhere.com - это есть началом всех запросов и дальше я прописывать не буду.

git_name - имя Юзера ГитХаба

git_repository_blog - имя репозитория этого юзера

id_file - уникальное имя файла/поста присваивается нашем приложением

id_comment - уникальный id комментария, получаем из апи ГитХаба, через наше приложение

access_token - специальный ключ получаемый через авторизацию на нашем приложении

# Базовые запросы
**1. Запрос на получение списка постов**

> *`/<gitname>/<gitrepositoryblog>/api/get`, метод=GET- выведет json со словарем постов, лучше отправлять авторизированно через токен в аргументах, но выведет и без токена**.*

**2. Запрос на получение одного поста**

> *`/<git_name>/<git_repository_blog>/api/get/id/<id>` метод=GET, где id - это индивидуальный номер поста, получаем из запроса №1. выведет json с данными об этом посте, или {'message': 'no such post'} если id не совпадет*
> 
> *также можно получить данные поста по имени файла на гитхабе включая расширение или же title из первого запросе, обратиться в этом случае надо `/<git_name>/<git_repository_blog>/api/get/<title>` метод=GET*

**3. Запрос на обновление блога(считывает все данные с репозитория)**

> *`/<git_name>/<git_repository_blog>/api/update или web_hook` метод=GET. До обновления все данные берутся из файла хранящегося локально, который был считан первый раз при открытии блога. рекомендуется обновлять при каждом изменении сделанном в блоге, ну и обящательно настроить вебхук на гитхабе*

**4. Запрос на получение списка всех юзеров кто пользуется платформой**

> *`/api/blog_list`метод=GET. отдает json всех кто пользуется платформой в виде Имя и Реп*
 
**5. Запрос на авторизацию через ГитХаб**

> *`/<git_name>/<git_repository_blog>/api/oauth?code=code`метод=GET. в запросе обязательно в аргументах надо указать код полученный от ГитХаба при авторизации. Отдает access_token пользователя ГитХаба
 
**6. Запрос на проверку прав пользователя к данному репозиторию(является ли этот юзер коллаборатором репа)**
> *`/api/repo_master/<git_name>/<git_repository_blog>/<test_user>?access_token=access_token`метод=GET. в запросе обязательно в аргументах надо указать token от ГитХаба иначе работать не будет. Отдает {'access': True} или {'access': False}
 
**7. Запрос на получение словаря всех комментариев ко всем постам конкретного блога Юзера**
> *`/<git_name>/<git_repository_blog>/api/get_comments`метод=GET. лучше отправлять авторизированно через токен в аргументах, но выведет и без токена, на выходе отдастт json сословарем комментариев 
 
**8. Запрос на получение комментариев к одному посту блога Юзера**
> *`/<git_name>/<git_repository_blog>/api/get_comments/<id_file>`метод=GET. лучше отправлять авторизированно через токен в аргументах, но выведет и без токена, на выходе отдастт json со списком комментариев к этому посту, id_file - оно же имя файла в папке /posts.
 
**9. Запрос на удаление одного комментария**
> *`/<git_name>/<git_repository_blog>/api/get_comments/<id_comment>?access_token=access_token`метод=DELETE запрос только аворизированный. id_comment - берется из 8 запроса - удаляет комментарий по его id

**10. Запрос на добавление одного комментария**
> *`/<git_name>/<git_repository_blog>/api/get_comments?access_token=access_token`метод=POST запрос только аворизированный. Должен прийти json с {'body': 'text_of_new_comment'}, отдаст json с новым комментом  (его содержание, его id, дата, автор)
 
**11. Запрос на редактирование конкретного комментария**
> *`/<git_name>/<git_repository_blog>/api/get_comments/<id_comment>?access_token=access_token`метод=PUT запрос только аворизированный. Должен прийти json с {'body': 'new_text_of_old_comment'}, отдаст статус запроса (успешно или нет)
 
**12. Запрос на закрытие/открытие комментариев к конкретному посту**
> *`/<git_name>/<git_repository_blog>/api/lock_comments/<id_file>?access_token=access_token`метод=GET/DELETE запрос только аворизированный. Открывает/закрывает возможность оставлять комментарии. id_file получаем изи запроса 2 - оно же имя файла в папке /posts.
 
 **13. Запрос на получение статуса комментария (закрыт или открыт)**
> *`/<git_name>/<git_repository_blog>/api/lock_status/<id_comment>` метод=GET запрос не аворизированный. Отдает {'status': False} или {'status':  True}
 
 **14. Запрос на удаление блога юзера**
> *`/<git_name>/<git_repository_blog>/api/del_repo?access_token=access_token` метод=DELETE запрос только аворизированный.  Удаляет все файлы из папки posts конкретного репозитория
 
 **15. Запрос на получение списка постов отфильтрованного по тегам**
> *`/<git_name>/<git_repository_blog>/api/get/tags/<tag>` метод=GET запрос может быть авторизированный или нет.  Вернет такой же список постов как и в пункте 1, только сортированными по тегу.