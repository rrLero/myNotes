---
preview: While Selectors aren’t particular to Javascript, React, Redux or Reselect, this article will focus on their use in the context of those technologies and assumes you have a solid understanding of both React and Redux. So, let’s begin!
title: Understanding Javascript Selectors With and Without Reselect
tags: js, -----post-locked-by:rrLero
author: rrLero
date: 2018-07-21 20:42:00
---
# What are Selectors?
At their most simple, Selectors are simply functions that are used to select a subset data from a larger data collection.

## Selectors:

1. Have knowledge of the whereabouts or path to find a particular subset of data and
1. Return with the requested subset of data

## In code:
A selector to retrieve belts from a store could look like this:
`const getBelts = (state) => state.items.belts`

# Why Use Selectors?
Basic selectors (i.e simple functions that return a subset of data) are beneficial because they encapsulate knowledge of where to find that particular subset of data, they are also reusable and flexible. To see what I mean, let’s take a look at an example `DisplayBelts.js` component that isn’t using a selector to find belts.

```
// Select belts from the store without use of selectos
class DisplayBelts extends React.Component {
  render() {
    return this.props.belts.map(belt => <img src={belt.imgUrl} />)
  }
}

const mapStateToProps = state => {
  return {
    belts: state.items.belts
  }
}
```

What would happen if the business owners opened a cafe next door and the store of their online app was re-structured so that belts were now found here: `state.shop.items.belts`? The query in `DisplayBelts.js's mapStateToProps` function would need to be updated to become `belts: state.shop.items.belts` . Which isn’t too bad. But if the app had other components pulling out belts from the store then the developer would have to update the query in every place that’s pulling that information (not to mention updating all other queries that would be affected by the store restructure like `DisplayHats` , `DisplayShirts`, etc.).

What would it look like to create and use a selector that retrieves belts?

```
// Note: selectors are usually created in a relevant reducer file or a separate selectors file
const getBelts = (state) => state.shop.items.belts;

// in DisplayBelts.js
class DisplayBelts extends React.Component {
  render() {
    return this.props.belts.map(belt => <img src={belt.imgUrl} />);
  }
}

const mapStateToProps = state => {
  return {
    belts: getBelts(state)
  }
}
```

In the above example you can see that the basic selector, `getBetls` is just a function of state that returns a specified piece of state (in this case belts). If in the future the business owners decided to re-structure their store again, after updating relevant reducers the developer would only have to update `getBelts`.

Because selectors are just functions they are also composable:

```

const getItems = state => state.shop.items

const getBelts = state => {
  const items = getItems()
  return items.belts
}
```

To summarize, even the most basic selectors provide the encapsulation of knowledge of where to find data which leads the ability to write reusable and composable code.

# Why Use Reselect to Create Selectors?
The short answer is: for performance as Reselect provides a wrapper for creating selectors that are **memoized**.

The examples of selectors that you’ve seen so far have only been responsible for retrieving data as it appears in the redux store. This would only likely be enough in small apps where the data that app needs can found directly in the store. However, in larger and more complex apps, it’s advisable to keep the store with minimal amount of information as it cuts down on repetition and generally helps to avoid highly nested data that results in more complex reducer logic. This is especially relevant for apps that are structured with a normalized store.

In any case— *selectors can be used to compute derived data.*

Going back to our business app, suppose we wanted to find the current value of all items in the store.

We could create a the following selectors:

```

const shopItemsSelector = state => state.shop.items
const taxPercentSelector = state => state.shop.taxPercent

const subtotalSelector = state => {
  const items = shopItems(state)
  return items => items.reduce((acc, item) => acc + item.value, 0)
}

const taxSelector = state => {
  const subtotal = subtotalSelector(state)
  const taxPercent = taxPercentSelector(state)
  return (subtotal, taxPercent) => subtotal * (taxPercent / 100)
}

export const totalSelector = state => {
  const subtotal = subtotalSelector(state)
  const tax = taxSelector(state)
  return (subtotal, tax) => ({ total: subtotal + tax })
}
```

When you factor in the fact that generally speaking React components re-render whenever their or their parent’s state or props change — the computation of derived data can easily become expensive. The biggest benefit of Reselect is that selectors created with the library are memoized and therefore will only re-run if their arguments change.

# Reselect’s Syntax
Reselect offers up a function called createSelector() that’s used to create memoized selectors. Here is example code from the docs that our business app examples built off of.

```
import { createSelector } from 'reselect'

const shopItemsSelector = state => state.shop.items
const taxPercentSelector = state => state.shop.taxPercent

const subtotalSelector = createSelector(
  shopItemsSelector,
  items => items.reduce((acc, item) => acc + item.value, 0)
)

const taxSelector = createSelector(
  subtotalSelector,
  taxPercentSelector,
  (subtotal, taxPercent) => subtotal * (taxPercent / 100)
)

export const totalSelector = createSelector(
  subtotalSelector,
  taxSelector,
  (subtotal, tax) => ({ total: subtotal + tax })
)
```

As you can see createSelector is a function that takes two arguments:

1. Selector(s) — if you have multiple selectors they can be inputted as a comma separated (like shown above) or as an array.
1. A tranformer function that takes the values of the selectors from the first arguments and uses them to select or derive relevant data

# Using Reselect

### *To retrieve state in a component*

```
import {totalSelector} from 'path/to/selector'

class Inventory extends React.Component {
  render() {
    return <h1>`The shop's total inventory is: ${this.props.inventoryValue}`</h1>
  }
}

const mapStateToProps = (state) => {
  return {
    inventoryValue: totalSelector(state)
  }
}
```

This is the most basic use case and is implemented the same way that you would use a selector that wasn’t created with Reselect.

### *Replacing a `mapStateToProps` function with a selector*

As a further performance enhancer, a React component’s `mapStateToProps` function can be replaced with a selector to cut down on the number of times the component is re-rendered.

```
import {totalSelector} from 'path/to/selector'
import {createSelector} from 'reselect'

class Inventory extends React.Component {
  render() {
    return <h1>`The shop's total inventory is: ${this.props.inventoryValue}`</h1>
  }
}

const mapStateToPropsSelector = createSelector(
  totalSelector,
  (total) => {
    return {inventoryValue: total}
  }
)
```

### *Using CreateStructuredSelector*

To cut down on boilerplate, Reselect offers a `createStructuredSelector` that can be used in place of a `creatSelector` function that is being passed to `connect`. It is most helpful to use in components that are pulling in a number of selectors.

```
import {subtotalSelector, taxPercentSelector, taxSelector, totalSelector} from 'path/to/selector'
import {createStructuredSelector} from 'reselect'

class Inventory extends React.Component {
  render() {
    return (
      <h1>`The shop's total inventory is: ${this.props.inventoryValue}`</h1>
      <h3>`The shop's subtotal inventory is ${this.props.inventorySubtotal}`</h3>
      <h3>`The shop's tax percent is ${this.props.taxPercent}`</h3>
      <h3>`This shop's total tax percent is ${this.props.totalTaxPercent}`</h3>
    )
  }
}

const mapStateToPropsSelector = createStructuredSelector({
  inventorySubtotal: subtotalSelector,
  inventoryValue: totalSelector,
  taxPercent: taxPercentSelector,
  totalTaxPercent: taxSelector
})
```