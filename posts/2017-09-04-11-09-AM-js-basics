---
preview: JS - my Reminder
title: JS-reminder
tags: JS, -----post-locked-by:rrLero
author: rrLero
date: 2017-09-04 14:07:00
---
**Замыкание** – это функция вместе со всеми внешними переменными, которые ей доступны.
Тем не менее, в JavaScript есть небольшая терминологическая особенность.
Обычно, говоря «замыкание функции», подразумевают не саму эту функцию, а именно внешние переменные.
Иногда говорят «переменная берётся из замыкания». Это означает – из внешнего объекта переменных.

**this** - Итак, мы знаем, что this – это текущий объект при вызове «через точку» и новый объект при конструировании через new.

**Итого про this**
Значение this устанавливается в зависимости от того, как вызвана функция:

При вызове функции как метода:

```
obj.func(...)    // this = obj
obj["func"](...)
```

При обычном вызове:
```
func(...) // this = window (ES3) /undefined (ES5)
```

В new:

```
new func() // this = {} (новый объект)
```

Явное указание:

```
func.apply(context, args) // this = context (явная передача)
func.call(context, arg1, arg2, ...)
```

**Область видимости**
В JS область видимости – это текущий контекст в коде. ОВ могут быть определены локально или глобально. Ключ к написанию пуленепробиваемого кода – понимание ОВ. Давайте разбираться, где переменные и функции доступны, как менять контекст в коде и писать более быстрый и поддерживаемый код (который и отлаживать быстрее). Разбираться с ОВ просто – задаём себе вопрос, в какой из ОВ мы сейчас находимся, в А или в Б?

**Вкратце, функция называется чистой, если она удовлетворяет двум условиям:**
1. Функция возвращает точно такой же результат каждый раз, когда она вызывается с тем же набором аргументов.
1. Выполнение функции не изменяет какое-либо состояние за пределами её области видимости и не оказывает видимого воздействия на внешний мир, кроме возвращения значения (никаких побочных эффектов).

```
(function() {
	  "use strict";
	  var capify = function(str) {
	    return [str.charAt(0).toUpperCase(), str.substring(1)].join("");
	  };
	  var processWords = function(fn, str) {
	    return str.split(" ").map(fn).join(" ");
	  };
	  document.getElementById("main_button").addEventListener("click", function(e) {
	    var something = prompt("Give me something to capitalize");1	    alert(processWords(capify, something));
	  });
	}());
```
Мы задали только две функции: capify и processWords. Каждая из этих функций чистая, это значит, что они , это означает, что они не зависят от своего положения в коде, из которого они вызываются. . Функции не создают побочные эффекты, которые изменяют переменные. Существует один и только один результат, возврата функции для любого набора аргументов. Из-за проведенных улучшений, новые функции очень легко протестировать, они также могут быть легко вырезаны из кода, и использованы в любом другом месте без каких-либо дополнительных модификаций.

**Начните мыслить функционально**

Вы не должны отказываться от всего, что вы знаете, чтобы воспользоваться функциональной парадигмой. Вы можете начать думать о JavaScript функционально, если в следующий раз, когда будете писать в нем программу задатие себе следующие вопросы:

Зависят ли мои функции от контекста, в котором они вызываются, или они чистые и независимые?
Могу ли я написать эти функции таким образом, чтобы они всегда возвращали один и тот же результат для заданных входных данных?
Уверен ли я, что мои функции не изменяют ничего лишнего?
Если бы я хотел использовать эти функции в другой программе, мне нужно было бы внести изменения в них?


Read more: http://lpgenerator.ru/blog/2016/03/31/vvedenie-v-funkcionalnoe-programmirovanie-na-javascript/#ixzz4tKJspUS6