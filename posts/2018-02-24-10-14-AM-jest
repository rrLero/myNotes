---
preview: # Jest - Testing
title: Jest
tags: jest
author: rrLero
date: 2018-02-24 12:01:00
---
**1. npm i -E -D jest**

**2. В Package.json дописываем конфигурацию для jest**

```
"jest": {
        "setupTestFrameworkScriptFile": "./config/jest/test-framework-setup.js",
        "moduleNameMapper": {
            "\\.(styl)$": "<rootDir>/config/jest/dumb-mock.js"
        }
    }
```

**3. Папки с тестами называем `__tests__`** - jest будет искать такие папки

**4. В package.json дописываем**
`"check:test": "jest"`

**5. In config create folder jest**, and then put rhere two files:

`dumb-mock.js`

```
module.exports = {};
```

and 

`test-framework-setup.js`

```
const Enzyme = require('enzyme');
const Adapter = require('enzyme-adapter-react-16');

Enzyme.configure({adapter: new Adapter()});
```

and install `enzyme` and `enzyme-adapter-react-16`

**6. Пример написания теста**

Допустим есть функция fullName в fullName.js:

```
// @flow

type User = {
    firstName?: string,
    lastName?: string,
    login: string
};

export default (user: User) => {
    if (user.firstName && user.lastName) {
        return `${user.firstName} ${user.lastName}`;
    }
    return user.firstName || user.lastName || user.login;
};
```

создаем директорию `__tests__` куда помещаем файл `fullName.tests.js`

```
import fullName from '../fullName';

describe('fullName', () => {
    it('Should return "firstName lastName" if both exist', () => {
        const user = {
            firstName: 'Leonid',
            lastName: 'Baida',
            login: 'leonid.baida@gmail.com'
        };
        expect(fullName(user)).toEqual('Leonid Baida');
    });

    it('Should return "firstName" if lastName is missed', () => {
        const user = {
            firstName: 'Leonid',
            login: 'leonid.baida@gmail.com'
        };
        expect(fullName(user)).toEqual('Leonid');
    });

    it('Should return "lastName" if firstName is missed', () => {
        const user = {
            lastName: 'Baida',
            login: 'leonid.baida@gmail.com'
        };
        expect(fullName(user)).toEqual('Baida');
    });

    it('Should return "login" if both names (first and last) are missed', () => {
        const user = {
            login: 'leonid.baida@gmail.com'
        };
        expect(fullName(user)).toEqual('leonid.baida@gmail.com');
    });
});
```

Пример Тестирования Компонента:
```
import React from 'react';
import {mount} from 'enzyme';
import PaginationStrip from '../index';
import Pagination from '../../pagination';

describe('PaginationStrip', () => {
    const currentPage = 1;
    const totalCount = 350;

    it('should be callback on change in select that return current page and items per page', () => {
        let current = null;
        let itemsPerPage = null;
        const callback = jest.fn((curr, items) => {
            current = curr;
            itemsPerPage = items;
        });

        const component = mount(
            <PaginationStrip totalCount={totalCount} currentPage={4} onChange={callback}/>
        );

        component.find('select').simulate('change', {target: {value: 250}});

        expect(callback).toHaveBeenCalled();
        expect(current).toEqual(1);
        expect(itemsPerPage).toEqual(250);
    });

    it('should be callback on change current page in pagination-strip', () => {
        const callback = jest.fn();
        const component = mount(
            <PaginationStrip totalCount={totalCount} currentPage={2} onChange={callback}/>
        );

        component.find(Pagination).find('a').first().simulate('click');

        expect(callback).toHaveBeenCalledWith(1, 10);
    });

    describe('max page size', () => {
        it('should be 3 items in select in case if total count is equal to 24', () => {
            const count = 24;
            const component = mount(
                <PaginationStrip totalCount={count} currentPage={currentPage}/>
            );

            expect(component.find('select option').length).toEqual(3);
        });

        it('should be 3 items in select in case if total count is equal to 25', () => {
            const count = 25;
            const component = mount(
                <PaginationStrip totalCount={count} currentPage={currentPage}/>
            );

            expect(component.find('select option').length).toEqual(3);
        });

        it('should be 4 items in select in case if total count is equal to 26', () => {
            const count = 26;
            const component = mount(
                <PaginationStrip totalCount={count} currentPage={currentPage}/>
            );

            expect(component.find('select option').length).toEqual(4);
        });
    });
});
```