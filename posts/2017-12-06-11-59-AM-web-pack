---
preview: 
![](https://habrastorage.org/webt/59/d2/8d/59d28db598c21927003649.png)
title: WEBPACK - по шагам
tags: webpack
author: rrLero
date: 2017-12-06 13:29:00
---
# 1. npm i -E -D webpack
* -E - означает, что версии пакетов не будут изменятся на продакшене

* -D - означает dev-dependencies - пакеты которые используются для разработки и не нужны в продакшене.

* `package-lock.json` лочит версии сторонних пакетов - не игнорим его. 

* После установки webpack - создаем папку `src` в которой будут лежать наши файлы проекта (сразу можно поместить `index.js`).

* Также после установки webpack - создаем папку `config` в которой будут лежать наши файлы конфига webpack.
 
* В папке `config` принято разделять файлы на ОСНОВНОЙ и ВСПОМОГАТЕЛЬНЫЕ (расширяют ОСНОВНОЙ)

	`webpack.config.js` - изначально будет иметь такое содержание - 

```
const path = require('path');

module.exports = {
    entry: ['./src/index.js'],
    output: {
        filename: 'bundle.js',
        path: path.resolve(__dirname, '../dist')
    },
};
```

* `entry` - точка входа
* `output` - что получаем на выходе
* `__dirname` - текущая директория - прикол NodeJS

и паралельно пишем в `package.json` 
```
    "scripts": {
        "build": "webpack --config config/webpack.config.js"
    },
```
где мы говорим, что webpack должен смотреть конфиг в такойто папке.

* Перед каждым запуском build нам надо удалять папку dist, для этого ставим модуль
`rimraf` и добавляем в `script`  `"build": "rimraf dist && webpack --config config/webpack.config.js"`

-----------------------------------------

* Добавим html - файл в наш проект для этого ставим плагин
`html-webpack-plugin`, а сам файл `index.htm` помещаем в папку `src` и записываем ему минимальное содержание:

```
<!DOCTYPE html>
<html>
<head>
    <title>WebPack</title>
</head>
<body>
</body>
</html>
```

Добавляем этот плагин в наш Конфиг.

```
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
    entry: ['./src/index.js'],
    output: {
        filename: 'bundle.[hash].js',
        path: path.resolve(__dirname, '../dist')
    },
    plugins: [
        new HtmlWebpackPlugin({
            hash: true,
            template: './src/index.html'
        })
    ],
};
```

* Обязательно хэшируем файлы, что-бы браузер не заменял новые версии своими

---------------------------------------------------
* Далее мы для разработки создаем конфиг, `webpack.config.dev.js ` - который будет расширять основной конфиг (для этого устанавливаем вспомогательный пакет `webpack-merge`).

```
const webpack = require('webpack');
const webpackMerge = require('webpack-merge');
const commonConfig = require('./webpack.config');

module.exports = webpackMerge(commonConfig, {
    devtool: 'source-map',
    plugins: [
        new webpack.HotModuleReplacementPlugin()
    ],
    devServer: {
        historyApiFallback: true,
        stats: 'minimal'
    }
});
```

все в принципе понятно, только небольшие пояснения - 
* `source-map` - позволит нам видеть исходное состояние нашего кода, исключая всякие примеси. 

* `webpack.HotModuleReplacementPlugin()` - будет отслеживать изменения нашего кода.

* Ставим веб-сервер ВебПака для онлайн просмотра результата
`webpack-dev-server`

в package.json scripts прописываем 

```
"start:dev": "webpack-dev-server --config config/webpack.config.dev.js"
```
особо пояснений, думаю не надо.

# 2. Babel
Для того что-бы писать на последних стандартах JS и не боятся, что не все браузеры прочитают код, нам поможет Babel.

Babel - переводит новые фичи js в формат 5 ECMA-script

Устанавлмваем слкдующие пакеты:

```
        babel-core, 
				babel-loader, 
				babel-plugin-transform-flow-strip-types, 
				babel-plugin-transform-object-rest-spread, 
				babel-polyfill, 
				babel-preset-env
```

Затем добавляем в основной конфиг в `entry`
`['babel-polyfill', './src/index.js'],` - что будет позволять нам использовать самые новые фичи современных стандартов JS, а также 

```
    module: {
        rules: [
            {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/,
                include: path.resolve()
            },
        ]
    }
```

это правило будет отлавливать все файлы с `.js` и прогонять их через babel-loader, на выходе получая нужную нам форму .js

в директории где `package.json` создаем файл `.babelrc`

```
{
    "presets": [
        [
            "env",
            {
                "targets": {
                    "browsers": [
                        "chrome 60"
                    ]
                }
            }
        ]
    ]
}
```

в `targets` мы указываем согласно каким стандартам будет трансформироваться наш код js. В данном примере стандарт который поддерживает  chrome 60

# 3. Подключаем стили - пример Less

Установим `style-loader, css-loader, less-loader, less` 
и в основной конвиг добавим:

```
            {
                test: /\.less/,
                loader: 'style-loader!css-loader!less-loader'
            },
```

такой синтаксис прогоняет справа налево стили (сначала через `less-loader` потом через `css-loader` и последний `style-loader`). 
И при этом мы подключаем наши стили в проект при помощи `index.js`, где мы делаем импорт содержимога, например, main.less файла.
`import './main';`
такой код не сработает - так как по-умолчанию webpack будет искать js файлы. Поэтому мы добавляем:

```
    resolve: {
        extensions: [
            '.less
            '.js'
        ],
    },
```
но надо помнить, что если будут одинаковые названия файлов с разными расширениями то webpack найдет первое совпадение и не будет искать дальше.

# 4.a Flow

* Что-бы настроить flow мы устанавливаем `flow-bin`
* в `package.json` создаем `script` `"check": "flow check"` и перед запуском скрипта `build` или `dev` вставляем `npm run check`
* в корне создаем файл `.flowconfig`

```
[ignore]

[include]

[libs]

[options]
```

и в файлах, которые мы хотим проверять на типизацию перед основным кодом вставляем:

```
// @flow
```

* Что-бы работала `idea` - мы в выборе js окружения выбираем `flow` и там где путь указывае путь к файлу flow - в моем случае это:

`/mnt/e6aaed64-0038-48fa-8387-afa14575de71/home/rrlero/WebstormProjects/SPD_HOMEWORKS/HW-TypeScript-Flow-OOP/node_modules/flow-bin/flow-linux64-v0.59.0/flow`

* ЕСЛИ IDEA - НЕ НАЧАЛО ПОДСВЕЧИВАТЬ КОД БЕЗ ТИПИЗАЦИИ - надо попробовать поставить `flow` версией пониже текущей - в моем случае сработало.

* теперь если подключен `babel` - он начнет ругаться на непонятный для него код. Это решается установкой plugins для babel:
`babel-plugin-transform-flow-strip-types`

также дополнительно можно поставить plugin `babel-plugin-transform-object-rest-spread` -

>This plugin allows Babel to transform rest properties for object destructuring assignment and spread properties for object literals.

в `.babelrc` добавляем:

```
  "plugins": [
    "transform-object-rest-spread",
    "transform-flow-strip-types"
  ],
```


# 4.b TypeScript