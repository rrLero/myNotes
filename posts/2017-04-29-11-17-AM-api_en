---
preview: api in English
title: API git_blog documentation in English
tags: api, -----post-locked-by:rrLero
author: rrLero
date: 2017-04-29 13:47:00
---
In this moment backend situated on http://gitblog.pythonanywhere.com - thisis the begining of all requests to api.

git_name - name of GitHub User

git_repository_blog - name of the repo of this user

id_file - unique name of file/post which creates by our programm 

id_comment - unique id comment, getting from GitHub Api by our programm

access_token - special key token by authorazation  on our platform

# Basic Requests
**1. Request to recieve posts**

> *`/<gitname>/<gitrepositoryblog>/api/get`, method=GET- will output json with dict of posts, better send request with token in arguments but will outpost anyway**.*

**2. Request to receive one post**

> *`/<git_name>/<git_repository_blog>/api/get/id/<id>` method=GET, where id - individual number of post, getting from request №1. will output json with data from this post, or {'message': 'no such post'} if id not the same*
> 
> *also posiible to get data of post by the name of GitHub file with ext or title from first request, request in such caseа `/<git_name>/<git_repository_blog>/api/get/<title>` метод=GET*

**3. Request to update blog (reads all data from repo)**

> *`/<git_name>/<git_repository_blog>/api/update или web_hook` method=GET. Before update all data is getting from file saved localy, which was read first time when blog was opened. I recomend to update all time when any changes were made in blog, and make settings on webhook on github*

**4. Request to get all users who use platform**

> *`/api/blog_list`method=GET. will output json with all users in Name and Rep*
 
**5. Request on authorizathion on GitHub**

> *`/<git_name>/<git_repository_blog>/api/oauth?code=code`method=GET. in request required code in arguments received from GitHub in authorization. Will output access_token GitHub user
 
**6.Request to try users rights to repo (is this user collaborator of repo) **
> *`/api/repo_master/<git_name>/<git_repository_blog>/<test_user>?access_token=access_token`method=GET. in request access token required in arguments without token will not work. Will output {'access': True} or {'access': False}
 
**7. Request to get dict of all comments to all posts in one specific user's blog**
> *`/<git_name>/<git_repository_blog>/api/get_comments`method=GET. better send authorized request in arguments, but works anyway, will output json with comments dict 
 
**8. Request to get comments to specific post of user's blog**
> *`/<git_name>/<git_repository_blog>/api/get_comments/<id_file>`method=GET. etter send authorized request in arguments, but works anyway, will output json with list of comments to this post, id_file - the same that the name of the file in folder /posts.
 
**9. Request to delete one comment**
> *`/<git_name>/<git_repository_blog>/api/get_comments/<id_comment>?access_token=access_token`method=DELETE in request access token required in arguments without token will not work. id_comment - gettinf from 8 request - delete comment by it id

**10. Request to add one comment**
> *`/<git_name>/<git_repository_blog>/api/get_comments?access_token=access_token`method=POST only authorized.  need  outcome with  json  {'body': 'text_of_new_comment'}, will output json with new comment (hit data, it id, date, author)
 
**11. Request to edit specific comment**
> *`/<git_name>/<git_repository_blog>/api/get_comments/<id_comment>?access_token=access_token`method=PUT only authorized request. need to outcome json with {'body': 'new_text_of_old_comment'}, will output status of request (success or not)
 
**12. Request to open/close comments to specific post**
> *`/<git_name>/<git_repository_blog>/api/lock_comments/<id_file>?access_token=access_token`метод=GET/DELETE запрос только аворизированный. Открывает/закрывает возможность оставлять комментарии. id_file получаем изи запроса 2 - оно же имя файла в папке /posts.
 
 **13. Запрос на получение статуса комментария (закрыт или открыт)**
> *`/<git_name>/<git_repository_blog>/api/lock_status/<id_comment>` метод=GET запрос не аворизированный. Отдает {'status': False} или {'status':  True}
 
 **14. Запрос на удаление блога юзера**
> *`/<git_name>/<git_repository_blog>/api/del_repo?access_token=access_token` метод=DELETE запрос только аворизированный.  Удаляет все файлы из папки posts конкретного репозитория
 
 **15. Запрос на получение списка постов отфильтрованного по тегам**
> *`/<git_name>/<git_repository_blog>/api/get/tags/<tag>` метод=GET запрос может быть авторизированный или нет.  Вернет такой же список постов как и в пункте 1, только сортированными по тегу.
 
 **16. Запрос на получение списка постов в ветке post_branch**
> *`/<git_name>/<git_repository_blog>/api/get_branch_posts` метод=GET запрос может быть авторизированный или нет.  Вернет список постов находящиеся в ветке post_branch
 
 **17. Запрос на получение одного поста по id_file в ветке post_branch**
> *`/<git_name>/<git_repository_blog>/api/branch/remove/<id_file>` метод=GET запрос может быть авторизированный или нет.  Вернет один пост по его id
 
 **18. Запрос на удаление одного поста по id_file в ветке post_branch**
> *`/<git_name>/<git_repository_blog>/api/branch/remove/<id_file>` метод=DELETE запрос авторизированный.  Вернет статус о выполнении операции удаления файла в ветке 
 
 **19. Запрос на редактирование одного поста по id_file в ветке post_branch**
> *`/<git_name>/<git_repository_blog>/api/branch/remove/<id_file>` метод=POST запрос авторизированный необходим json с данными содержащими 'text_full_md' где измененные данные поста.  Вернет статус о выполнении операции редактирования файла в ветке 
 
 **20. Запрос на перенос одного поста по id_file в ветке post_branch в ветку master**
> *`/<git_name>/<git_repository_blog>/api/branch/remove/<id_file>` метод=PUT запрос авторизированный.  Вернет статус о выполнении операции переноса файла из ветки в мастер.