---
preview: # Начало работы с реактом и редаксом. Part-1 - Окружение
title: React Redux Start
tags: React, Redux
author: rrLero
date: 2018-02-07 11:52:00
---
1. Packafe.json - лучше все установить через npm i -E ... что-бы сохранить последовательность алфафита.

```
{
  "scripts": {
    "dev": "NODE_ENV=development webpack-dev-server --config config/webpack.config.dev.js",
    "build": "rimraf dist && webpack --config config/webpack.config.js",
    "prod": " rimraf dist && NODE_ENV=production webpack --config config/webpack.config.prod.js",
    "flow-typed": "rimraf flow-typed/npm && flow-typed install",
    "postinstall": "rimraf dist && NODE_ENV=production webpack --config config/webpack.config.prod.js"
  },
  "devDependencies": {
    "babel-core": "6.26.0",
    "babel-loader": "7.1.2",
    "babel-plugin-transform-class-properties": "6.24.1",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.26.0",
    "babel-polyfill": "6.26.0",
    "babel-preset-env": "1.6.1",
    "babel-preset-react": "6.24.1",
    "browser-sync": "2.23.5",
    "browser-sync-webpack-plugin": "1.2.0",
    "compression-webpack-plugin": "1.1.3",
    "copy-webpack-plugin": "4.3.1",
    "css-loader": "0.28.9",
    "extract-text-webpack-plugin": "3.0.2",
    "file-loader": "1.1.6",
    "flow-bin": "0.59.0",
    "flow-typed": "2.2.3",
    "html-webpack-plugin": "2.30.1",
    "less": "2.7.3",
    "less-loader": "4.0.5",
    "rimraf": "2.6.2",
    "style-loader": "0.19.1",
    "svg-inline-loader": "0.8.0",
    "uglifyjs-webpack-plugin": "1.1.6",
    "webpack": "3.10.0",
    "webpack-dev-server": "2.11.1",
    "webpack-merge": "4.1.1"
  },
  "dependencies": {
    "material-design-icons": "^3.0.1",
    "react": "16.2.0",
    "react-dom": "16.2.0",
    "react-redux": "5.0.6",
    "react-router-dom": "4.2.2",
    "redux": "3.7.2",
    "redux-logger": "3.0.6",
    "redux-thunk": "2.2.0"
  }
}
```

2. Настраиваем папку config 

**webpack.config.js**

```
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const BrowserSyncPlugin = require('browser-sync-webpack-plugin');
const ExtractTextPlugin = require("extract-text-webpack-plugin");
const webpack = require('webpack');

module.exports = {
    cache: true,
    entry: ['babel-polyfill','./src/index.js'],
    output: {
        filename: '[name].bundle.[hash].js',
        path: path.resolve(__dirname, '../dist'),
        publicPath: '/'
    },
    resolve: {
        extensions: [
            '.less',
            '.js'
        ]
    },
    plugins: [
        new HtmlWebpackPlugin({
            hash: true,
            template: './src/index.html'
        }),
        new BrowserSyncPlugin({
                open: false,
                notify: false,
                port: 9000,
                proxy: 'http://localhost:8080/'
            },
            {
                reload: false
            }),
        new ExtractTextPlugin("styles.css"),
        new webpack.DefinePlugin({
            'process.env': {
                NODE_ENV: JSON.stringify(process.env.NODE_ENV)
            }
        })

    ],
    module: {
        rules: [
            {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/,
                include: path.resolve()
            },
            process.env.NODE_ENV === 'production' ?
                {
                    test: /\.less/,
                    use: ExtractTextPlugin.extract({
                        fallback: "style-loader",
                        use: 'css-loader?{minimize: true}!less-loader'
                    })
                }
                :
                {
                    test: /\.less/,
                    loader: 'style-loader!css-loader!less-loader'
                },
            {
                test: /\.(png|jpg|gif)$/,
                use: {
                    loader: 'file-loader',
                    options: {
                        name: "./images/[name].[ext]"
                    }
                }
            }
        ]
    }
};
```

**webpack.config.dev.js**

```
const webpack = require('webpack');
const webpackMerge = require('webpack-merge');
const commonConfig = require('./webpack.config');

module.exports = webpackMerge(commonConfig, {
    devtool: 'source-map',
    plugins: [
        new webpack.HotModuleReplacementPlugin()
    ],
    devServer: {
        historyApiFallback: true,
        stats: 'minimal'
    }
});
```

**webpack.config.prod.js**

```
const webpackMerge = require('webpack-merge');
const commonConfig = require('./webpack.config');
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
const CompressionPlugin = require("compression-webpack-plugin");
const webpack = require('webpack');

module.exports = webpackMerge(commonConfig, {
    plugins: [
        new webpack.optimize.CommonsChunkPlugin({
            name: 'common'
        }),
        new UglifyJsPlugin({
            test: /\.js($|\?)/i
        }),
        new CompressionPlugin({
            cache: true,
            asset: '[path].gz[query]',
            algorithm: 'gzip'
        })
    ]
});
```

**3. Настраиваем babel .babelrc**

```
{
  "plugins": [
    "transform-object-rest-spread",
    "transform-flow-strip-types",
    "transform-class-properties"
  ],

  "presets": [
    [
      "env",
      {
        "targets": {
          "browsers": [
            "chrome 63"
          ]
        }
      }
    ],
    ["react"]
  ]
}
```

**4. Flow .flowconfig**

```
[ignore]

[include]

[libs]
./flow-typed/npm/

[options]
module.name_mapper='.*\.\(styl\|less\|svg\|png\|jpg\|cur\|html\)$' -> 'Stub'
module.system=haste
unsafe.enable_getters_and_setters=true
```

**5. flow-typed/global.js**

```
declare module Stub {
    declare module.exports: any;
}
```

**6. Дерево директорий **

```
src
		app
		components
		routes
		reducers
		store
		index.html
		index.js
		typedef.js
```

**7. index.html**

```
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>React-to-start</title>
    <link rel="shortcut icon" href="/images/favicon.png" type="image/x-icon">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
    <div id="root"></div>
    <div id="modal-root"></div>
</body>
</html>
```

**8. index.js**

```
// @flow

import React from 'react';
import {render} from 'react-dom';
import { BrowserRouter, Route } from 'react-router-dom';
import App from './app';

const root = document.getElementById('root');

if (root !== null) {
    render(
        <BrowserRouter>
            <Route component={App}/>
        </BrowserRouter>,
        root
    );
}
```

**9. Далее каждая папочка с компонентом содержит файл index.js and styles.less + картинки**