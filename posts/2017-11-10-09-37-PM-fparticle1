---
preview: # Функциональное программирование
title: fp
tags: JS
author: rrLero
date: 17-11-10 23:33
---
Теперь мы узнали о чистоте, отсутствии состояния, неизменяемости, декларативном программировании и функциях высшего порядка. Все эти концепции важны для понимания парадигмы функционального программирования.

**На практике: функциональное программирование на JavaScript**

Функциональное программирование охватывает приведенные выше концепции следующими способами:

* Основные функции реализованы с использованием чистых функций без побочных эффектов.
* Данные неизменяемы.
* Функциональные программы не имеют состояния.
* Императивный код контейнера управляет побочными эффектами и выполняет декларативный, чистый код ядра.

Примечание: если бы мы попытались написать JavaScript веб-приложение, состоящее только из чистых функций без побочных эффектов, оно не смогло бы взаимодействовать с окружением и поэтому не было бы особенно полезным.

Давайте рассмотрим пример. Скажем, у нас есть текст, и мы хотим посчитать количество слов в нем. Мы также хотим найти ключевые слова длиной более пяти символов. Используя функциональное программирование, наш результирующий код может выглядеть примерно так:

```
const fpCopy = `Functional programming is powerful and enjoyable to write. It's very cool!`;
// убирает из строки пунктуацию
const stripPunctuation = (str) =>
  str.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, '');
// разбивает строку по пробелам, чтобы создать массив
const getArr = (str) =>
  str.split(' ');
// подсчитывает количество элементов массива
const getWordCount = (arr) =>
  arr.length;
// находит элементы массива длиннее 5 символов
// и приводит их к нижнему регистру
const getKeywords = (arr) =>
  arr
    .filter(item => item.length > 5)
    .map(item => item.toLowerCase());
// обрабатывает текст: подготавливает строки, создает массив, подсчитывает слова и получает ключевые слова
function processCopy(str, prepFn, arrFn, countFn, kwFn) {
  const copyArray = arrFn(prepFn(str));
  console.log(`Word count: ${countFn(copyArray)}`);
  console.log(`Keywords: ${kwFn(copyArray)}`);
}
processCopy(fpCopy, stripPunctuation, getArr, getWordCount, getKeywords);
// результат: число слов: 11
// результат: ключевые слова: functional,programming,powerful,enjoyable
```

Он разбит на понятные, декларативные функции с четким назначением. Если мы пройдем по нему и прочитаем комментарии, то никаких дополнительных разъяснений кода не потребуется. Каждая функция ядра — модульная и зависит только от ее входных данных (чистая). Последняя функция обрабатывает ядро для генерации общих выходных данных. Функция `processCopy() `- нечистый контейнер, выполняющий ядро и управляющий побочными эффектами. Мы использовали функцию высшего порядка, принимающую другие функции в качестве аргументов для поддержания функционального стиля.

**Подводя итог: функциональное программирование**

Неизменяемость данных и отсутствие состояния гарантируют, что состояние программы не изменяется. Вместо этого возвращаются новые значения. Чистые функции используются для функциональности ядра. Чтобы запустить программу и обработать необходимые побочные эффекты, нечистые функции могут императивно вызывать чистые.